### **Array in a Class in C++**

In C++, an **array** can be used as a member of a class to store multiple data elements of the same type. Arrays in a class allow us to create objects that can hold and manipulate collections of data while maintaining object-oriented principles.

---

### **Key Concepts:**
1. **Defining an Array as a Member**: Arrays can be declared as private, protected, or public members of a class.
2. **Accessing Arrays**: Use member functions to manipulate or retrieve array elements.
3. **Constructor Initialization**: Arrays can be initialized using constructors.
4. **Dynamic Arrays**: Dynamic memory allocation (`new` and `delete`) can be used to manage arrays of variable size within a class.

---

### **Example 1: Static Array as a Class Member**

```cpp
#include <iostream>
using namespace std;

class ArrayClass {
private:
    int arr[5];  // Static array as a member
public:
    // Constructor to initialize array elements
    ArrayClass() {
        for (int i = 0; i < 5; i++) {
            arr[i] = i + 1;  // Initialize elements from 1 to 5
        }
    }

    // Function to display the array
    void displayArray() {
        cout << "Array elements: ";
        for (int i = 0; i < 5; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }

    // Function to modify an array element
    void setElement(int index, int value) {
        if (index >= 0 && index < 5) {
            arr[index] = value;
        } else {
            cout << "Index out of bounds!" << endl;
        }
    }

    // Function to get an array element
    int getElement(int index) {
        if (index >= 0 && index < 5) {
            return arr[index];
        } else {
            cout << "Index out of bounds!" << endl;
            return -1;
        }
    }
};

int main() {
    ArrayClass obj;

    obj.displayArray();  // Display initial array

    obj.setElement(2, 10);  // Modify an element
    obj.displayArray();  // Display updated array

    cout << "Element at index 2: " << obj.getElement(2) << endl;  // Access an element
    return 0;
}
```

**Output**:
```
Array elements: 1 2 3 4 5 
Array elements: 1 2 10 4 5 
Element at index 2: 10
```

#### **Explanation:**
- The class `ArrayClass` has a private array `arr` of size 5.
- The `displayArray` function is used to print the array.
- The `setElement` and `getElement` functions provide controlled access to array elements, ensuring encapsulation.

---

### **Example 2: Dynamic Array in a Class**

```cpp
#include <iostream>
using namespace std;

class DynamicArrayClass {
private:
    int* arr;  // Pointer for dynamic array
    int size;

public:
    // Constructor to allocate memory and initialize array
    DynamicArrayClass(int n) : size(n) {
        arr = new int[size];  // Dynamic allocation
        for (int i = 0; i < size; i++) {
            arr[i] = i + 1;  // Initialize elements
        }
    }

    // Destructor to deallocate memory
    ~DynamicArrayClass() {
        delete[] arr;  // Free the dynamically allocated memory
        cout << "Memory deallocated!" << endl;
    }

    // Function to display the array
    void displayArray() {
        cout << "Array elements: ";
        for (int i = 0; i < size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    DynamicArrayClass obj(10);  // Create an object with array size 10
    obj.displayArray();  // Display the array
    return 0;
}
```

**Output**:
```
Array elements: 1 2 3 4 5 6 7 8 9 10 
Memory deallocated!
```

#### **Explanation:**
- A pointer `arr` is used to dynamically allocate memory for the array.
- The `new` operator is used to allocate memory, and the `delete[]` operator is used in the destructor to deallocate memory.
- Dynamic arrays allow flexibility for variable-sized arrays.

---

### **Example 3: Array of Objects**

```cpp
#include <iostream>
using namespace std;

class Student {
private:
    string name;
    int marks;

public:
    // Constructor
    Student(string n = "", int m = 0) : name(n), marks(m) {}

    // Function to display student details
    void display() {
        cout << "Name: " << name << ", Marks: " << marks << endl;
    }
};

int main() {
    Student students[3] = {  // Array of Student objects
        Student("Alice", 85),
        Student("Bob", 90),
        Student("Charlie", 95)
    };

    cout << "Student Details:" << endl;
    for (int i = 0; i < 3; i++) {
        students[i].display();  // Call display for each object
    }
    return 0;
}
```

**Output**:
```
Student Details:
Name: Alice, Marks: 85
Name: Bob, Marks: 90
Name: Charlie, Marks: 95
```

#### **Explanation:**
- An array of `Student` objects is created, where each object stores a student's name and marks.
- Using an array of objects is common for scenarios like storing a list of students, employees, or other entities.

---

### **Use Cases of Arrays in Classes:**
1. **Data Storage**: Arrays in classes are used to store collections of data, such as marks, scores, or sensor readings.
2. **Encapsulation**: Arrays can be hidden as private members and accessed only through public member functions.
3. **Dynamic Arrays**: Useful when the size of the array is not known at compile time.
4. **Object Collections**: Arrays of objects are used for handling multiple instances of a class (e.g., managing a list of employees).

---

### **Key Points to Remember:**
1. **Static vs Dynamic Arrays**:
   - Static arrays have fixed sizes and are declared using regular syntax.
   - Dynamic arrays use pointers and `new`/`delete` for memory management.
2. **Encapsulation**:
   - Always access arrays through member functions to maintain encapsulation.
3. **Dynamic Memory**:
   - Use dynamic arrays for flexibility in array size.
   - Ensure proper memory management by freeing allocated memory in the destructor.
4. **Boundary Checking**:
   - Always validate indices when accessing or modifying array elements to avoid undefined behavior.